version: "3.9"
services:
  jenkins:
    image: jenkinsci/blueocean
    privileged: true
    user: root
    volumes:
      - /home/jose/jenkins_home/:/var/jenkins_home/
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  sonarqube:
    image: sonarqube:lts-community
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres-sonarqube/sonarqube
      - SONAR_JDBC_USERNAME=sonarqube
      - SONAR_JDBC_PASSWORD=sonarqube
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-extensions:/opt/sonarqube/extensions
    deploy:
      resources:
        limits:
          memory: 5GB
        reservations:
          memory: 2GB
    depends_on:
      - postgres-sonarqube
    restart: unless-stopped

  postgres-sonarqube:
    image: postgres:9.6
    volumes:
      - postgres-data-sonarqube:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=sonarqube
      - POSTGRES_USER=sonarqube
      - POSTGRES_PASSWORD=sonarqube

  jaeger:
    image: jaegertracing/all-in-one:1.29
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    restart: unless-stopped

  mysql:
    image: bitnami/mysql
    ports:
      - "3306:3306"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_USER=example
      - MYSQL_PASSWORD=example
      - MYSQL_DATABASE=sales
    restart: unless-stopped

  redis:
    image: redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  mongo:
    image: bitnami/mongodb
    environment:
      - MONGODB_USERNAME=example
      - MONGODB_PASSWORD=example
      - MONGODB_DATABASE=purchasing
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "27017:27017"
    restart: unless-stopped

  fluentd:
    image: joseluis8906/fluentd
    volumes:
      - ./fluent.conf:/fluentd/etc/fluent.conf:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    restart: unless-stopped
  
  elasticsearch:
    image: elasticsearch:7.16.2
    environment:
      discovery.type: single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    deploy:
      resources:
        limits:
          memory: 8GB
        reservations:
          memory: 5GB
    restart: unless-stopped

  aws:
    image: localstack/localstack
    environment:
      - SERVICES=dynamodb
      - DATA_DIR='/data'
      # - PORT_WEB_UI=8085
    volumes:
      - awsdata-data:/data
    ports:
      - '4566:4566'
    restart: unless-stopped

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: unless-stopped

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    restart: unless-stopped

  kibana:
    image: kibana:7.16.2
    environment:
      elasticsearch.hosts: http://elasticsearch:9200
    ports:
      - "5601:5601"
    volumes:
      - kibana-data:/usr/share/kibana/data
    restart: unless-stopped

  grafana:
    image: 'grafana/grafana-oss'
    ports:
      - '3000:3000'
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped

  prometheus:
    image: bitnami/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml:ro
      - prometheus-data:/prometheus
    entrypoint: ["/opt/bitnami/prometheus/bin/prometheus", "--config.file=/opt/bitnami/prometheus/conf/prometheus.yml", "--storage.tsdb.path=/opt/bitnami/prometheus/data", "--web.console.libraries=/opt/bitnami/prometheus/conf/console_libraries", "--web.console.templates=/opt/bitnami/prometheus/conf/consoles", "--web.enable-lifecycle"]
    restart: unless-stopped

  kong:
    image: kong
    ports:
      - '8000:8000'
      - '8443:8443'
      - '8001:8001'
      - '8444:8444'
    environment:
      - KONG_PG_HOST=postgres-kong
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_DATABASE=postgres
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl

  postgres-kong:
    image: postgres:9.6
    ports:
      - '5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=kong
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kong

  kong-migrations:
    image: kong
    depends_on:
      - postgres-kong
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres-kong
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    command: ['kong', 'migrations', 'bootstrap']

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    privileged: true
    expose:
      - "8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys/:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    restart: unless-stopped

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    command:
      - '--path.rootfs=/host'
    pid: host
    volumes:
      - /:/host:ro,rslave

################################## microservices #################################
  catalog-http:
    image: joseluis8906/catalog-http
    build:
      context: ../catalog
      dockerfile: ../catalog/scripts/http.Dockerfile
    volumes:
      - ../../catalog/configs/catalog.yml:/app/configs/catalog.yml:ro

  metrics-kafka:
    image: joseluis8906/metrics-kafka
    build:
      context: ../metrics
      dockerfile: ../metrics/scripts/kafka.Dockerfile
    volumes:
      - ../../metrics/configs/metrics.yml:/app/configs/metrics.yml:ro

  purchasing-http:
    image: joseluis8906/purchasing-http
    build:
      context: ../purchasing
      dockerfile: ../purchasing/scripts/http.Dockerfile
    volumes:
      - ../../purchasing/configs/purchasing.yml:/app/configs/purchasing.yml:ro

  purchasing-kafka:
    image: joseluis8906/purchasing-kafka
    build:
      context: ../purchasing
      dockerfile: ../purchasing/scripts/kafka.Dockerfile
    volumes:
      - ../../purchasing/configs/purchasing.yml:/app/configs/purchasing.yml:ro

  sales-http:
    image: joseluis8906/sales-http
    build:
      context: ../sales
      dockerfile: ../sales/scripts/http.Dockerfile
    volumes:
      - ../../sales/configs/sales.yml:/app/configs/sales.yml:ro

  sales-grpc:
    image: joseluis8906/sales-grpc
    build:
      context: ../sales
      dockerfile: ../sales/scripts/grpc.Dockerfile
    volumes:
      - ../../sales/configs/sales.yml:/app/configs/sales.yml:ro

  sales-kafka:
    image: joseluis8906/sales-kafka
    build:
      context: ../sales
      dockerfile: ../sales/scripts/kafka.Dockerfile
    volumes:
      - ../../sales/configs/sales.yml:/app/configs/sales.yml:ro

  warehouse-http:
    image: joseluis8906/warehouse-http
    build:
      context: ../warehouse
      dockerfile: ../warehouse/scripts/http.Dockerfile
    volumes:
      - ../../warehouse/configs/warehouse.yml:/app/configs/warehouse.yml:ro

  warehouse-kafka:
    image: joseluis8906/warehouse-kafka
    build:
      context: ../warehouse
      dockerfile: ../warehouse/scripts/kafka.Dockerfile
    volumes:
      - ../../warehouse/configs/warehouse.yml:/app/configs/warehouse.yml:ro

  ws-gateway:
    image: joseluis8906/ws-gateway
    build:
      context: ../ws-gateway
      dockerfile: ../ws-gateway/Dockerfile
    volumes:
      - ../../ws-gateway/config/default.yml:/app/config/default.yml:ro

  dash:
    image: joseluis8906/dash
    build:
      context: ../dash
      dockerfile: ../dash/Dockerfile
  
volumes:
  jenkins-data:
    driver: local
  sonarqube-data:
    driver: local
  sonarqube-extensions:
    driver: local
  awsdata-data:
    driver: local
  prometheus-data:
    driver: local
  kibana-data:
    driver: local
  grafana-data:
    driver: local
  postgres-data:
    driver: local
  postgres-data-sonarqube:
    driver: local
